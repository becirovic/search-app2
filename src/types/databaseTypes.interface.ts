// Generated by https://quicktype.io

export interface StelleTyp {
    count:    number;
    next:     string;
    previous: null;
    results:  Result[];
}

export interface Result {
    url:           string;
    legacy_id:     string;
    legacy_pk:     number;
    summary:       string;
    zitat:         string;
    zitat_stelle:  string;
    translation:   string;
    start_date:    number | null;
    end_date:      number | null;
    kommentar:     string;
    display_label: string;
    orig_data_csv: string;
    text:          Text;
    key_word:      Word[];
    ort:           any[];
    use_case:      UseCase[];
}

export interface Word {
    url:             string;
    legacy_id:       string;
    legacy_pk:       number | null;
    stichwort:       string;
    name_gr:         string;
    art:             ArtEnum;
    varianten:       string;
    wurzel:          string;
    kommentar:       KeyWordKommentar | null;
    orig_data_csv:   string;
    related_keyword: Word[];
}

export enum ArtEnum {
    Ethnonym = "Ethnonym",
    Keyword = "Keyword",
    Name = "Name",
    Region = "Region",
}

export enum KeyWordKommentar {
    Empty = "",
    ÜbernameFürSlawischeGruppen = "Übername für slawische Gruppen.",
}

export interface Text {
    url:           string;
    legacy_id:     string;
    legacy_pk:     number;
    title:         string;
    alt_title:     string;
    text_lang:     TextLang;
    jahrhundert:   string;
    start_date:    string;
    end_date:      string;
    not_before:    number;
    not_after:     number;
    edition:       string;
    kommentar:     string;
    orig_data_csv: string;
    art:           ArtClass;
    autor:         Autor[];
    ort:           Ort[];
}

export interface ArtClass {
    url:             string;
    pref_label:      PrefLabel;
    pref_label_lang: PrefLabelLang;
    top_concept:     null;
    notation:        string;
    related:         string;
    broad_match:     string;
    narrow_match:    string;
    exact_match:     string;
    related_match:   string;
    close_match:     string;
    legacy_id:       LegacyID;
    creator:         string;
    contributor:     string;
    needs_review:    null;
    date_created:    string;
    date_modified:   string;
    lft:             number;
    rght:            number;
    tree_id:         number;
    level:           number;
    scheme:          string;
    broader_concept: null;
    created_by:      null;
    collection:      string[];
}

export enum LegacyID {
    Art20 = "art__2.0",
    Art60 = "art__6.0",
    Art70 = "art__7.0",
}

export enum PrefLabel {
    GrammarsOrGrammaticalExplanationsGlosses = "Grammars or Grammatical Explanations/Glosses",
    Historiography = "Historiography",
    Vitae = "Vitae",
}

export enum PrefLabelLang {
    En = "en",
}

export interface Autor {
    url:             string;
    legacy_id:       string;
    legacy_pk:       number | null;
    name:            string;
    gnd_id:          string;
    name_lat:        string;
    name_en:         string;
    name_fr:         string;
    name_it:         string;
    name_gr:         string;
    jahrhundert:     string;
    start_date:      string;
    end_date:        string;
    start_date_year: number | null;
    end_date_year:   number | null;
    kommentar:       AutorKommentar;
    orig_data_csv:   string;
    ort:             null | string;
}

export enum AutorKommentar {
    Empty = "",
    The764HeBecomesBishopOfFreising = "764 he becomes bishop of Freising",
    ThePlaceOfBirthCouldAlsoBeSpain = "The place of birth could also be Spain",
}

export interface Ort {
    url:           string;
    legacy_id:     string;
    legacy_pk:     number | null;
    name:          string;
    norm_id:       NormID;
    name_antik:    string;
    name_de:       string;
    name_fr:       string;
    name_it:       string;
    name_gr:       string;
    long:          number;
    lat:           number;
    coords:        Coords;
    fuzzy_geom:    null;
    kommentar:     string;
    orig_data_csv: string;
    art:           string;
    kategorie:     string;
}

export interface Coords {
    type:        Type;
    coordinates: number[];
}

export enum Type {
    Point = "Point",
}

export enum NormID {
    Empty = "",
    The40713325 = "4071332-5",
}

export enum TextLang {
    Lat = "lat",
}

export interface UseCase {
    url:                    string;
    title:                  string;
    principal_investigator: string;
    pi_norm_id:             string;
    description:            string;
    story_map:              string;
    custom_layer:           null | string;
    knightlab_stoy_map:     any[];
}

